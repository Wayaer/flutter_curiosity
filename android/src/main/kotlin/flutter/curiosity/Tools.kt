package flutter.curiosityimport android.app.Activityimport android.app.ActivityManagerimport android.content.Contextimport android.content.Intentimport android.content.pm.ApplicationInfoimport android.content.pm.PackageInfoimport android.content.pm.PackageManagerimport android.location.LocationManagerimport android.net.Uriimport android.os.Buildimport android.os.Processimport androidx.core.content.FileProviderimport java.io.Fileimport kotlin.system.exitProcessobject Tools {    private fun PackageInfo.map(pm: PackageManager): Map<String, Any?> {        return mapOf(            "isSystemApp" to ((applicationInfo?.flags?.and(ApplicationInfo.FLAG_SYSTEM)) != 0),            "buildNumber" to if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) longVersionCode.toString() else versionCode.toString(),            "appName" to applicationInfo?.loadLabel(pm).toString(),            "packageName" to packageName,            "version" to versionName,            "lastUpdateTime" to lastUpdateTime,            "firstInstallTime" to firstInstallTime,        )    }    /**     * 获取应用列表     */    fun getInstalledApps(context: Context): ArrayList<Map<String, Any?>> {        val list: ArrayList<Map<String, Any?>> = ArrayList()        val pm = context.packageManager        val packages = pm.getInstalledPackages(0)        for (info in packages) {            list.add(info.map(pm))        }        return list    }    /**     * 退出app     */    fun exitApp(activity: Activity) {        //杀死进程，否则就算退出App，App处于空进程并未销毁，再次打开也不会初始化Application        val manager = activity.getSystemService(Context.ACTIVITY_SERVICE) as ActivityManager        manager.runningAppProcesses.forEach { processInfo ->            if (processInfo.pid != Process.myPid()) {                Process.killProcess(processInfo.pid)            }        }        exitProcess(0)    }    /**     * 判断GPS是否开启，GPS或者AGPS开启一个就认为是开启的     * @return true 表示开启     */    fun getGPSStatus(context: Context): Boolean {        val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager        // 通过GPS卫星定位，定位级别可以精确到街（通过24颗卫星定位，在室外和空旷的地方定位准确、速度快）        val gps: Boolean = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)        // 通过WLAN或移动网络(3G/2G)确定的位置（也称作AGPS，辅助GPS定位。主要用于在室内或遮盖物（建筑群或茂密的深林等）密集的地方定位）        val network: Boolean = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)        return gps || network    }    /**     * 安装apk     */    fun getInstallAppIntent(context: Context, apkPath: String): Intent? {        //安装        val file = File(apkPath)        if (!file.exists()) {            return null        }        try {            val intent = Intent(Intent.ACTION_VIEW)            val uri: Uri            //版本在7.0以上是不能直接通过uri访问的            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {                //参数1 上下文, 参数2 Provider主机地址 和配置文件中保持一致   参数3  共享的文件                uri = FileProvider.getUriForFile(                    context, "${context.packageName}.provider", file                )                //添加这一句表示对目标应用临时授权该Uri所代表的文件                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)            } else {                uri = Uri.fromFile(file)            }            intent.setDataAndType(uri, "application/vnd.android.package-archive")            return intent        } catch (e: Exception) {            println(e)        }        return null    }}